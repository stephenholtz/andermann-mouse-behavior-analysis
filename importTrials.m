% importTrials.m
%
% Import behavioral trial information
%   - behavior file metadata generated by monkeylogic (.BHV) 
% stimulus order / metadata
%   - acquired data from daq (+ threshold analog channels)
% 
% All relevant files for each experiment are in the same 
% directory. Original stimuli presented and scripts controlling
% stimulus timing and presentation are not.
%
% TODO: break off plotting, change to function calls
% TODO: break out acquisition specifics
%
% SLH 2014
%#ok<*NBRAK,*UNRCH>

verbose = 1;
if verbose; fprintf('\nImporting behavior trials\n=======================================================\n'); end

%------------------------------------------------------------ 
% Change for animal/experiment
%------------------------------------------------------------ 
animalName = 'K69';
expDateNum = '20140728_01';

% Switch data source for home vs lab
expDataSource = 2;
switch expDataSource
    case 1 % Local copy
        dataDir = '/Users/stephenholtz/local_data/andermann/';
    case 2 % Andermann Lab server (Atlas server mounted)
        dataDir = '/Volumes/twophoton_data/epi_rig_behavior';
    case 3 % Home file server copy
        dataDir = '/Volumes/dataset1/andermann/';
end

expDir = fullfile(dataDir,animalName,expDateNum);
if verbose; fprintf('expDir: %s\n',expDir); end

% Load in BHV file (behavioral results + metadata) 
% TODO: check if system call works on windows server
bhvFileName = dir(fullfile(expDir,'*.bhv'));
bhvFilePath = fullfile(expDir,bhvFileName.name);
if verbose; fprintf('\tLoading bhv file: %s\n',bhvFileName.name); end
bhvData = bhv_read(bhvFilePath);

% Load in .mat (nidaq + acquisition metadata)
matFileName = dir(fullfile(expDir,'*.mat'));
matFilePath = fullfile(expDir,matFileName.name);
if verbose; fprintf('\tLoading daq file: %s\n',matFileName.name); end
load(matFilePath);

% Look for eye tracking and whisker/face tracking files
if exist(fullfile(expDir,'eye'),'dir')
    if verbose; fprintf('\tEye tracking files found.\n'); end
end
if exist(fullfile(expDir,'whisker'),'dir')
    if verbose; fprintf('\tFace tracking files found.\n'); end
end

% Threshold analog channels (struct from nidaq acquisition = exp)
% Channel names are stored in the exp struct, should they change
% maybe a sane lookup should be added here.
lickChan    = 3;
rewardChan  = 4;
punishChan  = 5;
codeStrobe  = 8;
bitChans    = [9 10 11 12 13];

analogThresh = 4;

if verbose; fprintf('\tThresholding analog channels\n'); end
logLicks    = exp.Data(lickChan,:) > analogThresh;
logRewards  = exp.Data(rewardChan,:) > analogThresh;
logPunish   = exp.Data(punishChan,:) > analogThresh;

% Monkeylogic / specifics notes: 
%
% Default "codes" up to 32 from monkeylogic are captured with 5 bits
% lookup is in codes.txt (in my monkeylogic-running repo). Convert
% the bits acquired to the codes. 
%
% Default is to send 9 9 9 # 18 18 18 where # is the actual data 
% and 9/18 are failsafes for aligning. 
% Rohan uses 25 to be videos turning on and off and the bhv trial
% errors to indicate what the animal's trial result was (vs using
% the behavioral codes). This works well because it uses the 1's 
% bit only (probably should have just used this).
% 
% bhv struct has enough information to figure out what was going on
% more or less. Although some mysterious differences between codes
% and observed daq output occur, not just a shift register or false 
% bit. Replace 9->18, 25->6, 18->4
%
% Working version gives this output:
% trial onsets = 18 18 18 / trial offsets = 4 4 4
% stimulus onsets/offsets = 6 
% 12 also happens between 6's, no idea what it means
%
% TODO: place these notes somewhere better
if verbose; fprintf('\tImporting monkeylogic behavioral codes\n'); end
% Only look at the falling edge of the digital strobe
strobeLog = [exp.Data(codeStrobe,1) diff(exp.Data(codeStrobe,:)) == -1];
strobeInds = find(strobeLog);
codesMat = nan(numel(bitChans),numel(strobeInds));
for iBit = 1:numel(bitChans)
    codesMat(iBit,:) = exp.Data(bitChans(iBit),strobeInds);
end
clear iBit
codesMat = flipud(codesMat');
codeVals = bin2dec(num2str(codesMat));

% Stimulus onsets
stimOnsetLog = (codeVals == 6) | (codeVals == 12);
stimOnsetLog = diff([stimOnsetLog(1); stimOnsetLog]) == 1;
stimOnsetInds = find(stimOnsetLog);
% Trial onsets (unneeded)
trialOnsetLog = (codeVals == 18);
trialOnsetLog = diff([trialOnsetLog(1); trialOnsetLog]) == -1;
% Trial offsets (unneeded)
trialOffsetLog = (codeVals == 4);
trialOffsetLog = diff([trialOffsetLog(1); trialOffsetLog]) == 1;

if numel(bhvData.TrialNumber) ~= sum(trialOnsetLog)
   warning('Trial number in monkeylogic bhv file does not agree with number of detected trial onsets') 
end
numTrials = sum(trialOnsetLog);

% Gather data for a quick plot of animal licks to various stimuli
if ~isfield(exp,'daqRate'); exp.daqRate = 5E3; end
secsBefore = 1;
secsAfter = 5;

% 1 = pavlovian / 2 = conditional reward / 3 = blank 
nPavlovian  = sum(bhvData.ConditionNumber == 1);
nCondReward = sum(bhvData.ConditionNumber == 2);
nBlank      = sum(bhvData.ConditionNumber == 3);
% 4 = condition punish / 5 = neutral  
lickPavlovian   = nan(nPavlovian,exp.daqRate*(secsBefore+secsAfter));
lickCondReward  = nan(nCondReward,exp.daqRate*(secsBefore+secsAfter));
lickBlank       = nan(nBlank,exp.daqRate*(secsBefore+secsAfter));

% Generate rasters
for iTrial = 1:numTrials
    currCond = bhvData.ConditionNumber(iTrial); 
    currWind = (strobeInds(stimOnsetInds(iTrial))-(secsBefore*exp.daqRate)):((secsAfter*exp.daqRate)+strobeInds(stimOnsetInds(iTrial))-1);
    currWind(currWind < 1) = 1;
    switch currCond
        case 1 % Pavlovian
            nextRow = find(isnan(lickPavlovian(:,1)),1,'first');
            lickPavlovian(nextRow,:) = logLicks(currWind);
        case 2 % Cond reward
            nextRow = find(isnan(lickCondReward(:,1)),1,'first');
            lickCondReward(nextRow,:) = logLicks(currWind);
         case 3 % Blank
            nextRow = find(isnan(lickBlank(:,1)),1,'first');
            lickBlank(nextRow,:) = logLicks(currWind);
     end
end
clear currCond iTrial currCond CurrWind nextRow

figure;
plot(lickCondReward')
title('Lick Conditional Reward')
figure;
plot(lickPavlovian')
title('Lick Pavlovian')
figure;
plot(lickBlank')
title('Lick Blank')
